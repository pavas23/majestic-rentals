--insert into residential TABLE
CREATE OR REPLACE PROCEDURE RES_INSERT(PROP_ID IN INTEGER,RES_TYPE IN VARCHAR,BEDROOM_COUNT IN INTEGER) AS
BEGIN
INSERT INTO RES_PROP VALUES(PROP_ID,BEDROOM_COUNT,RES_TYPE);  
END;
/
-- insert into commercial
CREATE OR REPLACE PROCEDURE COMM_INSERT(PROP_ID IN INTEGER,COM_TYPE IN VARCHAR) AS
BEGIN
INSERT INTO COM_PROP VALUES(PROP_ID,COM_TYPE);  
END;
/
-- INSERT NEW PROPERTY AND DESIGNATE USER AS OWNER
create or replace procedure insertProperty(PROP_ID IN INTEGER,OWNER_ID IN VARCHAR,FLOOR_COUNT IN INTEGER, DOOR IN VARCHAR,STREET IN VARCHAR,CITY IN VARCHAR,STATE_NAME IN VARCHAR,PINCODE IN VARCHAR,YEAR_OF_CONST IN INTEGER,AVAIL_START_DATE IN DATE,AVAIL_END_DATE IN DATE,CURRENT_RENT_PM IN INTEGER,LOCALITY IN VARCHAR,ANNUAL_HIKE IN FLOAT,TOTAL_AREA IN INTEGER,PROP_TYPE IN VARCHAR,RES_TYPE IN VARCHAR DEFAULT NULL,COM_TYPE IN VARCHAR DEFAULT NULL,BEDROOM_COUNT IN INTEGER DEFAULT 0) AS
BEGIN
INSERT INTO PROPERTY VALUES(PROP_ID,OWNER_ID,FLOOR_COUNT,DOOR,STREET,CITY,STATE_NAME,PINCODE,YEAR_OF_CONST,AVAIL_START_DATE,AVAIL_END_DATE,CURRENT_RENT_PM,LOCALITY,0,TOTAL_AREA,PROP_TYPE,ANNUAL_HIKE);
UPDATE USERS SET ISOWNER = 1 WHERE AADHARID = OWNER_ID;
IF PROP_TYPE = 'Residential' or PROP_TYPE = 'RESIDENTIAL' OR PROP_TYPE = 'residential' THEN
RES_INSERT(PROP_ID,RES_TYPE,BEDROOM_COUNT);
ELSIF PROP_TYPE = 'COMMERCIAL' or PROP_TYPE = 'commercial' OR PROP_TYPE = 'Commercial' THEN
COMM_INSERT(PROP_ID,COM_TYPE);
ELSE
DBMS_OUTPUT.PUT_LINE('PROPERTY TYPE INVALID!');
END IF;
END;
/

--DELETE PROPERTY BY USER
CREATE OR REPLACE PROCEDURE deletePropertyByUser(PROP_ID IN INTEGER,OW_ID IN VARCHAR) AS
PROPERTY_COUNT INTEGER;
BEGIN
SELECT COUNT(*) INTO PROPERTY_COUNT FROM PROPERTY WHERE OWNER_ID = OW_ID;
IF PROPERTY_COUNT > 0 THEN
DELETE FROM PROPERTY WHERE PROPERTYID = PROP_ID AND OWNER_ID = OW_ID;
PROPERTY_COUNT := PROPERTY_COUNT-1;
IF PROPERTY_COUNT = 0 THEN
UPDATE USERS SET ISOWNER = 0 WHERE AADHARID = OW_ID;
END IF;
ELSE 
DBMS_OUTPUT.PUT_LINE('YOU HAVE NO LISTED PROPERTIES');
END IF;
END;
/

--getUserProperty() {rename to getPropertyRecords(OID in varchar)}
CREATE OR REPLACE PROCEDURE getUserProperty(OID IN VARCHAR) AS
N INTEGER;
PROP_TYPE VARCHAR(200);
BEGIN
SELECT COUNT(*) INTO N FROM PROPERTY WHERE PROPERTY.OWNER_ID = OID;
IF N > 0 THEN 
FOR ITR IN (SELECT * FROM PROPERTY WHERE PROPERTY.OWNER_ID = OID)
LOOP
IF ITR.PROPERTY_TYPE = 'Residential' or ITR.PROPERTY_TYPE = 'RESIDENTIAL' OR ITR.PROPERTY_TYPE = 'residential' THEN
SELECT BEDROOM_COUNT,RES_TYPE INTO N,PROP_TYPE FROM RES_PROP WHERE RES_PROP.PROPERTYID = ITR.PROPERTYID;
ELSE
SELECT COM_TYPE INTO PROP_TYPE FROM COM_PROP WHERE COM_PROP.PROPERTYID = ITR.PROPERTYID;
END IF;
IF ITR.isRented = 1 THEN
DBMS_OUTPUT.PUT_LINE('PROPERTY ID: '||ITR.PROPERTYID|| ' (RENTED)');
ELSE 
DBMS_OUTPUT.PUT_LINE('PROPERTY ID: '||ITR.PROPERTYID|| ' (AVAILABLE)');
END IF;
DBMS_OUTPUT.PUT_LINE('ADDRESS: ' ||ITR.DOOR || ', '|| ITR.STREET||', ' ||ITR.LOCALITY ||', ' || ITR.CITY||', '||ITR.PINCODE||', ' ||ITR.STATE_NAME);
DBMS_OUTPUT.PUT_LINE('Year of Construction: '|| ITR.YEAR_OF_CONST);
DBMS_OUTPUT.PUT_LINE('Rent Per Month: '||ITR.CURRENT_RENT_PM);
DBMS_OUTPUT.PUT_LINE('Annual Hike: '||ITR.ANNUAL_HIKE);
DBMS_OUTPUT.PUT_LINE('Start Date: '||ITR.AVAIL_START_DATE || ' End Date: ' ||ITR.AVAIL_END_DATE);
DBMS_OUTPUT.PUT_LINE('Total Area: '||ITR.TOTAL_AREA);
DBMS_OUTPUT.PUT_LINE('Floor Count: '||ITR.FLOOR_COUNT);
IF ITR.PROPERTY_TYPE = 'Residential' or ITR.PROPERTY_TYPE = 'RESIDENTIAL' OR ITR.PROPERTY_TYPE = 'residential' THEN
DBMS_OUTPUT.PUT_LINE('Property Type: Residential');
DBMS_OUTPUT.PUT_LINE('No. Of bedrooms: '||N);
DBMS_OUTPUT.PUT_LINE('Residential Type: '||PROP_TYPE);
ELSE
DBMS_OUTPUT.PUT_LINE('Property Type: Commercial');
DBMS_OUTPUT.PUT_LINE('Commercial Type: '||PROP_TYPE);
end if;
END LOOP;
ELSE
DBMS_OUTPUT.PUT_LINE('You do not have any listed properties');
END IF;
end;
/

--RENT A PROPERTY
CREATE OR REPLACE PROCEDURE rentProperty(USER_ID in VARCHAR,PROP_ID in INTEGER,END_DATE IN DATE,START_DATE IN DATE) AS
OID VARCHAR(50);
RENTED_FLAG INTEGER;
LAST_END_DATE DATE;
BEGIN
SELECT OWNER_ID INTO OID FROM PROPERTY WHERE PROPERTYID = PROP_ID;
IF OID = USER_ID THEN
DBMS_OUTPUT.PUT_LINE('Owner cant rent their own property');
ELSE
SELECT isRented INTO RENTED_FLAG FROM PROPERTY WHERE PROPERTYID = PROP_ID;
IF RENTED_FLAG = 1 THEN
SELECT MAX(END_DATE) INTO LAST_END_DATE FROM TENANT_PROP_RENT WHERE RENT_PROPERTYID = PROP_ID;
IF START_DATE <= LAST_END_DATE THEN
DBMS_OUTPUT.PUT_LINE('This Property is already rented');
ELSE
SELECT AVAIL_END_DATE INTO LAST_END_DATE FROM PROPERTY WHERE PROPERTYID = PROP_ID;
IF START_DATE < LAST_END_DATE AND END_DATE < LAST_END_DATE THEN
INSERT INTO TENANT_PROP_RENT VALUES(USER_ID,PROP_ID,START_DATE,END_DATE);
ELSE 
DBMS_OUTPUT.PUT_LINE('This property is unavailable during this period.');
END IF;
END IF;
ELSE
INSERT INTO TENANT_PROP_RENT VALUES(USER_ID,PROP_ID,START_DATE,END_DATE);
UPDATE PROPERTY SET ISRENTED = 1 WHERE PROPERTYID = PROP_ID;
END IF;
END IF;
END;
/


    




